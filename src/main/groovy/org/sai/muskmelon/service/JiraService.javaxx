package org.sai.doctool.service;

import com.atlassian.jira.rest.client.JiraRestClient;
import com.atlassian.jira.rest.client.NullProgressMonitor;
import com.atlassian.jira.rest.client.domain.Issue;
import com.atlassian.jira.rest.client.internal.jersey.JerseyJiraRestClientFactory;

import org.sai.doctool.domain.Changelist;
import org.sai.doctool.domain.Changeset;
import org.sai.doctool.domain.Service;
import org.sai.doctool.domain.ServiceRequest;
import org.sai.doctool.domain.Story;
import org.sai.doctool.repository.SourceRepository;
import org.sai.doctool.repository.StoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;

/**
 * Created by IntelliJ IDEA.
 * User: Sai
 * Date: 29/01/12
 * Time: 09:41
 * To change this template use File | Settings | File Templates.
 */
public class JiraService implements Service {

    private final SourceRepository sourceRepository;
    private final StoryRepository storyRepository;
    private final String jiraUrl;
    private final String userName;
    private final String password;
    private final String issueIdPatternRegex;

    @Autowired
    public JiraService(SourceRepository sourceRepository,
                       @Value("http://57.5.179.12") String jiraUrl,
                       @Value("skrishnamurthy") String userName,
                       @Value("Hobart4$") String password,
                       @Value("*") String issueIdPatternRegex,
                       StoryRepository storyRepository) {
        this.sourceRepository = sourceRepository;
        this.jiraUrl = jiraUrl;
        this.userName = userName;
        this.password = password;
        this.issueIdPatternRegex = issueIdPatternRegex;
        this.storyRepository = storyRepository;
    }

    public void load(ServiceRequest request) {
        List<Changelist> changesets = sourceRepository.findAll();
        for (Changelist change : changesets) {
            Story story = getStory(changeset);
            story.addSourceChange(changeset);
            storyRepository.save(story);
        }
    }

    private Story getStory(final Changeset changeset) {
        Story story = new Story();
        try {
            final JerseyJiraRestClientFactory factory = new JerseyJiraRestClientFactory();
            final URI jiraServerUri = new URI(jiraUrl);
            final JiraRestClient restClient = factory.createWithBasicHttpAuthentication(jiraServerUri, userName, password);
            final NullProgressMonitor pm = new NullProgressMonitor();
            final Issue issue = restClient.getIssueClient().getIssue(getStoryId(changeset.getMessage()), pm);
            story.setAuthor(issue.getReporter().getName());
            story.setIdentifier(issue.getKey());
            story.setTitle(issue.getSummary());
            story.setStatus(issue.getStatus().getName());
            story.setDescription(issue.getDescription());
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }

        return story;
    }

    private String getStoryId(String message) {
        // TODO
        return "";
    }


}
